$Header: /home/tim/cvs/palm/eggjabot/jabberlib/doc/reference.txt,v 1.1 2004/01/23 01:58:27 tim Exp $

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     THIS DOCUMENT IS OUT OF DATE
   PLEASE EXAMINE THE jlib.tcl FILE
   FOR PROCEDURES, AND THEIR USAGES
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


This file documents the interface between the jabberlib library
and whatever Jabber client uses it.


                 CLIENT TO JLIB PROCEDURES

CONNECT:
- To connect to a server, connect your socket to the server, if
	you want, do proxying, etc., and then call:

  jlib::connect $server_name $socket_id


DISCONNECT:
- To disconnect from the Jabber server, call:

  jlib::disconnect


SEND IQ:
- To send a iq packet, call:

  jlib::send_iq $type $xmldata $args

  $type     is the iq-type, it can be "get", "set", "result", or "error".
            ("result" and "error" are used when replying an incoming iq.)
  $xmldata  must be valid xml_data of the child-tag of <iq> packet, created
            by "jlib::wrapper:createtag" procedure. If $type is "get", "set",
            or "result", its tagname will be set to "query". If $type is
            "error", its tagname will be set to "error".

  $args can be:
    -to $to       : Specify someone to send this packet. If it isn't specified,
                    this part is set to sender's user-id by the server.
    -id $id       : Specify an id to send with the <iq>. If $type is "get", or
                    "set", then the id will be generated by jlib internally,
                    and this switch will not work. If $type is "result" or
                    "error", then you may use this switch.
    -command $cmd : Specify a callback to call when the reply-packet is got.
                    This switch will not work if $type is "result" or "error".


SEND MESSAGE:
- To send a message, call:

  jlib:send_msg $to $args

  $args can be:
    -subject $subject     : Set subject of the message to $subject.
    -thread $thread       : Set thread of the message to $thread.
    -priority $priority   : Set priority of the message to $priority.
    -body $body_xml_data  : $body_xml_data MUST be valid xml_data, created
                            by the "jlib::wrapper:createtag" procedure.
    -xlist $xlist         : A list containing *X* xml_datas. Anything can be
                            put inside an *X*. Please make sure you created it
                            with "jlib::wrapper:createtag" procedure, and also,
                            it has a "xmlns" attribute in its root tag. If root
                            tag's name isn't "x", then it'll be renamed to "x".


SEND PRESENCE:
- To send your presence, call:

  jlib::send_presence $args



ROSTER MANAGEMENT:
- To get your roster from server, call:

  jlib::roster_get $args

  $args can be:
    -command $cmd         : Specify a callback routine. This routine will be
                            called with the parameter "BEGIN" before sending
                            the roster to client, and with "END" when sending
                            the roster data to client (from jlib) finishes.
                            If server responds with an error, this routine
                            will be called with the parameter "ERR"

  When the reply comes from server, jlib first controls if it's an error-reply.
  If it is, then it calls $command with the parameter "ERR". If it is a normal
  reply, jlib first calls $command with the parameter "BEGIN". The client
  should clear its roster in its GUI, etc. when it got the "BEGIN". Then, jlib
  will call "client:roster_item" for each item in roster with the parameters:
  $user-id $name $groups $subscription $ask

  If "client:roster_item" is called outside a "BEGIN"-"END" range, then it
  is a roster-push by the server, showing server modified your roster according
  to a presence packet (either send by you, or somebody adding you/allowing you
  to add him/her to your roster), which adds/deletes/modifies a user in your
  roster.


- To set/add an item in/to your roster, call:

  jlib::roster_set $user-id $args

  $args can be:
    -name $name           : A name to show the user-id as on roster to the user.
    -groups $group_list   : Groups of user. If you omit this, then the user's
                            groups will be set according to the user's options
                            stored in jlib's variables. If user doesn't exist
                            there (probably, you're new adding this user, not
                            modifiying existing user), user's groups will be
                            set to "", which means no groups.
    -command $cmd         : A callback to run, when the reply arrives from
                            server. This command will be called with the
                            parameter "OK", on a successful reply, or "ERR"
                            when server returns an error.


- To remove an item in your roster, call:

  jlib::roster_del $user-id $args

  $args can be:
    -command $cmd         : A callback to run, when the reply arrives from
                            server. This command will be called with the
                            parameter "OK", on a successful reply, or "ERR"
                            when server returns an error.

...TO BE CONTINUED...

